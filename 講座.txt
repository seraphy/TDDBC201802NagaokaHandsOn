課題は全員同じ
TDDとは？
動作するきれいなコード
１．一部設計(TODO)　２．テストコード ３．テスト(Red) ４．コード実装 ５．テスト(Green)  5.5テストコードテスト ６.リファクタリング(Refactor)

最初は簡単なのからやっていく→徐々に大事なものに進めて行く

・動くコード→動作するきれいなコード
・テストがうまくいくままきれいにしていく
・リファクタリング：重複の数を減らす
・TODO：直近は詳細で、それ以外の粒度は荒くでもよい

テストしやすいものからテスト開始
一番最初にスタート地点に経っているのかどうか？
→テスト環境が正しくできているのか、テスト環境設計が飛鳥になってくるので？

テストコードは日本語で書かれている方が分かりやすい

以下のテスト構造の下から書く
//前準備
//実行
//検証

使う側から作っていく→使いやすくなる
テスト→仮実装→三角測量→本実装
テスト→仮実装→本実装
テスト→明白な実装

テストコードのテストは実装コードでテストする
テストケース1つでテストコードは1つ

テストコード重複の除去は慎重に行わなければならない

前準備のテストの場所をあらかじめ準備しておく

テスト間に依存性があってはならない
→個別にテストが出来なくなるので

仕様レベルの言葉をテストコードにに含め、仕様レベルのテスト結果にする

テストを動くドキュメントにする
テストの論理的重複を排除して最小限に整理する(実装側の立場)
テストの構造化とリファクタリング

実装を保証するテストと品質を保証するテストは別


